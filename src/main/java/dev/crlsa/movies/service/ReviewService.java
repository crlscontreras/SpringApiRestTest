package dev.crlsa.movies.service;

import dev.crlsa.movies.entity.Movie;
import dev.crlsa.movies.entity.Review;
import dev.crlsa.movies.repository.ReviewRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Service;

@Service
public class ReviewService {

    @Autowired
    private ReviewRepository reviewRepository;

    //we can use this template to create a new custom dynamic querie, without using the repository
    @Autowired
    private MongoTemplate mongoTemplate;

    public Review createReview(String reviewBody, String imdbId){
        //create a review, with the reviewBody that came from the Frontend
        //the ID is autogenerated
        //.insert(new Object) returns the object
        Review review = reviewRepository.insert(new Review(reviewBody));

        //we add the review to the database


        //we associate the new review to its movie
        //.update(class we want to update).matching(Criteria.where(propertyNameInDB).is(propertyNameFromFrontend))
        //.apply(new Update().push("propertyNameInClass").value(newObject);
        mongoTemplate.update(Movie.class)
                .matching(Criteria.where("imdbId").is(imdbId))
                .apply(new Update().push("reviewsId").value(review))
                .first();

        return review;
    }
}
